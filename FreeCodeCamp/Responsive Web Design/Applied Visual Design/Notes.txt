Create Visual Balance Using the text-align Property

    text-align: justify; spaces the text so that each line has equal width.

    text-align: center; centers the text

    text-align: right; right-aligns the text

    and text-align: left; (the default) left-aligns the text.

Adjust the Width of an Element Using the width Property

img {
    width: 220px;
}

Adjust the Height of an Element Using the height Property

img {
    height: 20px;
}

Use the strong Tag to Make Text Bold

    With the strong tag, the browser applies the CSS of font-weight: bold; to the element.

    <strong>Stanford University</strong>

Use the u Tag to Underline Text

    With the u tag, the browser applies the CSS of text-decoration: underline; to the element.

    <u>Ph.D. students</u>

    Note: Try to avoid using the u tag when it could be confused for a link. Anchor tags also have a default underlined formatting.

Use the em Tag to Italicize Text

    To emphasize text, you can use the em tag. This displays text as italicized, as the browser applies the CSS of font-style: italic; to the element.

    <em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em>

Use the s Tag to Strikethrough Text

    With the s tag, the browser applies the CSS of text-decoration: line-through; to the element.

    <s>Google</s>

Create a Horizontal Line Using the hr Element

    <hr>

    Note: In HTML, hr is a self-closing tag, and therefore doesn't need a separate closing tag.

Adjust the background-color Property of Text

rgba stands for:
  r = red
  g = green
  b = blue
  a = alpha/level of opacity

background-color: rgba(45, 45, 45, 0.1)

Adjust the Size of a Heading Element Versus a Paragraph Element

h4 {
    text-align: center;
    background-color: rgba(45, 45, 45, 0.1);
    padding: 10px;
    font-size: 27px;
}

Add a box-shadow to a Card-like Element

    The box-shadow property takes values for

    offset-x (how far to push the shadow horizontally from the element),
    offset-y (how far to push the shadow vertically from the element),
    blur-radius,
    spread-radius and
    color, in that order.

    The blur-radius and spread-radius values are optional.

    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

Decrease the Opacity of an Element

    A value of 1 is opaque, which isn't transparent at all.
    A value of 0.5 is half see-through.
    A value of 0 is completely transparent.

    opacity: 0.7;

Use the text-transform Property to Make Text Uppercase

    Value	Result
    lowercase	"transform me"
    uppercase	"TRANSFORM ME"
    capitalize	"Transform Me"
    initial	Use the default value
    inherit	Use the text-transform value from the parent element
    none	Default: Use the original text

    text-transform: uppercase;

Set the font-size for Multiple Heading Elements

    font-size: 68px;

Set the font-weight for Multiple Heading Elements

    font-weight: 800;

Set the font-size of Paragraph Text

    The font-size property in CSS is not limited to headings, it can be applied to any element containing text.

Set the line-height of Paragraphs

    line-height: 25px;

Adjust the Hover State of an Anchor Tag

a:hover {
    color: red;
}

Change an Element's Relative Position

p {
    position: relative;
    bottom: 10px;
}

Move a Relatively Positioned Element with CSS Offsets

    The CSS offsets of top or bottom, and left or right tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the h2 downwards. Likewise, using a left offset moves an item to the right.

Lock an Element to its Parent with Absolute Positioning

  #searchbar {
    position: absolute;
    top: 50px;
    right: 50px;
  }

Lock an Element to the Browser Window with Fixed Positioning

    One key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.

  #navbar {
    position: fixed;
    top: 0px;
    left: 0px;
    width: 100%;
    background-color: #767676;
  }

Push Elements Left or Right with the float Property

    The next positioning tool does not actually use position, but sets the float property of an element. Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. It's commonly used with the width property to specify how much horizontal space the floated element requires.

    <style>
    #left {
    float: left;
    width: 50%;
    }
    #right {
    float: right;
    width: 40%;
    }
    aside, section {
    padding: 2px;
    background-color: #ccc;
    }
    </style>

Change the Position of Overlapping Elements with the z-index Property

    When elements are positioned to overlap (i.e. using position: absolute | relative | fixed | sticky), the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the z-index property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the z-index property of an element move it higher in the stack than those with lower values.

    z-index: 2;

Center an Element Horizontally Using the margin Property

    Another positioning technique is to center a block element horizontally. One way to do this is to set its margin to a value of auto.

    This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the display property to block.

    margin: auto;

Learn about Complementary Colors

    Some examples of complementary colors with their hex codes are:

    red (#FF0000) and cyan (#00FFFF)
    green (#00FF00) and magenta (#FF00FF)
    blue (#0000FF) and yellow (#FFFF00)

    - [https://en.wikipedia.org/wiki/Color_model]

Learn about Tertiary Colors

    Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.

    Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.

    Here are three colors created using the split-complement scheme:

    Color	Hex Code
    orange	#FF7F00
    cyan	#00FFFF
    raspberry	#FF007F

Adjust the Color of Various Elements to Complementary Colors

    The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.

Adjust the Hue of a Color

    Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the hsl() property as an alternative way to pick a color by directly stating these characteristics.

    Hue is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.

    Saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.

    Lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.

    Here are a few examples of using hsl() with fully-saturated, normal lightness colors:

    Color	HSL
    red	hsl(0, 100%, 50%)
    yellow	hsl(60, 100%, 50%)
    green	hsl(120, 100%, 50%)
    cyan	hsl(180, 100%, 50%)
    blue	hsl(240, 100%, 50%)
    magenta	hsl(300, 100%, 50%)

Adjust the Tone of a Color

    The hsl() option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of hsl() stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.

Create a Gradual CSS Linear Gradient

    Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the background property's linear-gradient() function. Here is the general syntax:

    background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);

    The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right) and 45deg makes a diagonal gradient (from bottom left to top right). The following arguments specify the order of colors used in the gradient.

    Example:

    background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));

    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);

Use a CSS Linear Gradient to Create a Striped Element

    The repeating-linear-gradient() function is very similar to linear-gradient() with the major difference that it repeats the specified gradient pattern. repeating-linear-gradient() accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.

    The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.

    In the example demonstrated in the code editor, the gradient starts with the color yellow at 0 pixels which blends into the second color blue at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color green, which itself blends into the fourth color value red as that is 80 pixels away from the beginning of the gradient.

    For this example, it helps to think about the color stops as pairs where every two colors blend together.

    0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px

    If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.

    background: repeating-linear-gradient(
        45deg,
        yellow 0px,
        yellow 40px,
        black 40px,
        black 80px
    );

Create Texture by Adding a Subtle Pattern as a Background Image

    One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The background property supports the url() function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.

    <style>
    body {
        background: url(https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png);
    }
    </style>

Use the CSS Transform scale Property to Change the Size of an Element

    To change the scale of an element, CSS has the transform property, along with its scale() function. The following code example doubles the size of all the paragraph elements on the page:

    p {
    transform: scale(2);
    }

Use the CSS Transform scale Property to Scale an Element on Hover

    The transform property has a variety of functions that let you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as :hover that specify a certain state of an element, the transform property can easily add interactivity to your elements.

    Here's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:

    p:hover {
    transform: scale(2.1);
    }

    Note: Applying a transform to a div element will also affect any child elements contained in the div.

Use the CSS Transform Property skewX to Skew an Element Along the X-Axis

    The next function of the transform property is skewX(), which skews the selected element along its X (horizontal) axis by a given degree.

    The following code skews the paragraph element by -32 degrees along the X-axis.

    p {
    transform: skewX(-32deg);
    }

Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis

    Given that the skewX() function skews the selected element along the X-axis by a given degree, it is no surprise that the skewY() property skews an element along the Y (vertical) axis.
    
Create a Graphic Using CSS

    By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the box-shadow property that sets the shadow of an element, along with the border-radius property that controls the roundness of the element's corners.

Create a More Complex Shape Using CSS and HTML

.heart::before {
    content: "";
    background-color: yellow;
    border-radius: 25%;
    position: absolute;
    height: 50px;
    width: 70px;
    top: -50px;
    left: 5px;
}

    For the ::before and ::after pseudo-elements to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, the content property is still required, but it's set to an empty string. In the above example, the element with the class of heart has a ::before pseudo-element that produces a yellow rectangle with height and width of 50px and 70px, respectively. This rectangle has round corners due to its 25% border-radius and is positioned absolutely at 5px from the left and 50px above the top of the element.

Learn How the CSS @keyframes and animation Properties Work

