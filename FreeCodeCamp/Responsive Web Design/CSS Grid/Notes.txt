CSS Grid

    The CSS grid is a newer standard that makes it easy to build complex responsive layouts. It works by turning an HTML element into a grid, and lets you place child elements anywhere within.

    In this course, you'll learn the fundamentals of CSS grid by building different complex layouts, including a blog.


Create Your First CSS Grid

    Turn any HTML element into a grid container by setting its display property to grid. This gives you the ability to use all the other properties associated with CSS Grid.

    Note: In CSS Grid, the parent element is referred to as the container and its children are called items.

    display: grid;

Add Columns with grid-template-columns

    Simply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the grid-template-columns property on a grid container as demonstrated below:

    .container {
    display: grid;
    grid-template-columns: 50px 50px;
    }
    This will give your grid two columns that are each 50px wide. The number of parameters given to the grid-template-columns property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.

Add Rows with grid-template-rows

    The grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the grid-template-rows property in the same way you used grid-template-columns in the previous challenge.

Use CSS Grid units to Change the Size of Columns and Rows

    You can use absolute and relative units like px and em in CSS Grid to define the size of rows and columns. You can use these as well:

    fr: sets the column or row to a fraction of the available space,

    auto: sets the column or row to the width or height of its content automatically,

    %: adjusts the column or row to the percent width of its container.

    Here's the code that generates the output in the preview:

    grid-template-columns: auto 50px 10% 2fr 1fr;

    This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.

Create a Column Gap Using grid-column-gap

    So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the grid-column-gap property like this:

    grid-column-gap: 10px;

    This creates 10px of empty space between all of our columns.

Create a Row Gap using grid-row-gap

    You can add a gap in between the rows of a grid using grid-row-gap in the same way that you added a gap in between columns in the previous challenge.

Add Gaps Faster with grid-gap

    grid-gap is a shorthand property for grid-row-gap and grid-column-gap from the previous two challenges that's more convenient to use. If grid-gap has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.

Use grid-column to Control Spacing

    Up to this point, all the properties that have been discussed are for grid containers. The grid-column property is the first one for use on the grid items themselves.

    The hypothetical horizontal and vertical lines that create the grid are referred to as lines. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.

    This is what the lines look like for a 3x3 grid:

    column lines 1 2 3 4
    row lines 1 2 3 4

    To control the number of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at.

    Here's an example:

    grid-column: 1 / 3;
    This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.

Use grid-row to Control Spacing

    Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the grid-row property on a grid item.

Align an Item Horizontally using justify-self

